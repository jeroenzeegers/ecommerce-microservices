name: Deploy to Kubernetes

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/ecommerce

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_DATA }}
    
    - name: Verify cluster connection
      run: |
        kubectl cluster-info
        kubectl get nodes
    
    - name: Create namespaces
      run: |
        kubectl apply -f k8s/base/namespace.yaml
    
    - name: Create Datadog secret
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
      run: |
        if [ -n "$DD_API_KEY" ]; then
          kubectl create secret generic datadog-secret \
            --from-literal=DD_API_KEY="$DD_API_KEY" \
            -n ecommerce \
            --dry-run=client -o yaml | kubectl apply -f -
          echo "‚úÖ Datadog secret created"
        else
          echo "‚ö†Ô∏è  DD_API_KEY not provided, skipping Datadog secret creation"
        fi
    
    - name: Deploy configuration
      run: |
        kubectl apply -f k8s/base/secrets.yaml
    
    - name: Deploy infrastructure
      run: |
        kubectl apply -f k8s/infrastructure/
    
    - name: Wait for infrastructure
      run: |
        echo "Waiting for MySQL..."
        kubectl wait --for=condition=available --timeout=300s deployment/mysql -n ecommerce-infrastructure || true
        
        echo "Waiting for MongoDB..."
        kubectl wait --for=condition=available --timeout=300s deployment/mongodb -n ecommerce-infrastructure || true
        
        echo "Waiting for Zookeeper..."
        kubectl wait --for=condition=available --timeout=300s deployment/zookeeper -n ecommerce-infrastructure || true
        
        echo "Waiting for Kafka..."
        kubectl wait --for=condition=available --timeout=300s deployment/kafka -n ecommerce-infrastructure || true
        
        # Give additional time for services to stabilize
        sleep 30
    
    - name: Deploy Datadog agent
      env:
        DD_API_KEY: ${{ secrets.DD_API_KEY }}
      run: |
        if [ -n "$DD_API_KEY" ]; then
          kubectl apply -f k8s/base/datadog.yaml
          kubectl wait --for=condition=ready --timeout=300s pod -l app=datadog-agent -n ecommerce || true
          echo "‚úÖ Datadog agent deployed"
        else
          echo "‚ö†Ô∏è  DD_API_KEY not provided, skipping Datadog agent deployment"
        fi
    
    - name: Update image tags
      run: |
        # Update all service manifests with the new image tags
        services=("discovery-service" "api-gateway" "user-service" "product-service" "order-service" "payment-service" "inventory-service" "notification-service" "shipping-service" "favourite-service" "promotion-service" "rating-service" "tax-service" "search-service" "media-service")
        
        for service in "${services[@]}"; do
          if [ -f "k8s/base/services/${service}.yaml" ]; then
            sed -i "s|image: ghcr.io/YOUR_USERNAME/ecommerce-${service}:latest|image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${service}:${{ github.sha }}|g" k8s/base/services/${service}.yaml
          fi
        done
    
    - name: Deploy discovery service
      run: |
        kubectl apply -f k8s/base/services/discovery-service.yaml
        kubectl wait --for=condition=available --timeout=300s deployment/discovery-service -n ecommerce
        
        # Wait for Eureka to be fully ready
        echo "Waiting for Eureka to be fully ready..."
        sleep 60
    
    - name: Deploy microservices
      run: |
        # Deploy all services
        kubectl apply -f k8s/base/services/
        
        # List of services to wait for (excluding discovery-service as it's already deployed)
        services=("api-gateway" "user-service" "product-service" "order-service" "payment-service" "inventory-service" "notification-service" "shipping-service" "favourite-service" "promotion-service" "rating-service" "tax-service" "search-service" "media-service")
        
        # Wait for each deployment
        for service in "${services[@]}"; do
          echo "Waiting for ${service} to be ready..."
          kubectl wait --for=condition=available --timeout=300s deployment/${service} -n ecommerce || echo "Warning: ${service} deployment may not be ready"
        done
    
    - name: Deploy ingress
      run: |
        kubectl apply -f k8s/base/ingress.yaml
    
    - name: Verify deployment
      run: |
        echo "=== Deployment Status ==="
        kubectl get pods -n ecommerce -o wide
        kubectl get svc -n ecommerce
        kubectl get ingress -n ecommerce
        
        echo ""
        echo "=== Infrastructure Status ==="
        kubectl get pods -n ecommerce-infrastructure -o wide
        
        echo ""
        echo "=== Resource Usage ==="
        kubectl top pods -n ecommerce --no-headers || echo "Metrics not available"
        
        # Check for any failed pods
        failed_pods=$(kubectl get pods -n ecommerce --field-selector=status.phase!=Running,status.phase!=Succeeded --no-headers 2>/dev/null | wc -l)
        if [ "$failed_pods" -gt 0 ]; then
          echo "‚ö†Ô∏è  Warning: $failed_pods pods are not in Running state"
          kubectl get pods -n ecommerce --field-selector=status.phase!=Running,status.phase!=Succeeded
        else
          echo "‚úÖ All pods are running successfully"
        fi
    
    - name: Run health checks
      run: |
        # Wait for services to fully start
        echo "Waiting for services to stabilize..."
        sleep 120
        
        # Try to get ingress endpoint
        echo "Getting ingress information..."
        kubectl describe ingress ecommerce-ingress -n ecommerce
        
        # Test internal service connectivity
        echo "Testing internal service connectivity..."
        
        # Check if discovery service is accessible
        kubectl exec -n ecommerce deployment/discovery-service -- curl -f -s http://localhost:8761/actuator/health || echo "Discovery service health check failed"
        
        # Check if API gateway is accessible
        kubectl exec -n ecommerce deployment/api-gateway -- curl -f -s http://localhost:8080/actuator/health || echo "API Gateway health check failed"
    
    - name: Display access information
      run: |
        echo "üéâ Deployment completed!"
        echo ""
        echo "üìä Access Information:"
        echo "======================"
        
        # Get ingress IP/hostname
        INGRESS_IP=$(kubectl get ingress ecommerce-ingress -n ecommerce -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
        INGRESS_HOSTNAME=$(kubectl get ingress ecommerce-ingress -n ecommerce -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
        
        if [ -n "$INGRESS_IP" ]; then
          echo "Ingress IP: $INGRESS_IP"
          echo "Add to /etc/hosts: echo '$INGRESS_IP ecommerce.local' | sudo tee -a /etc/hosts"
        elif [ -n "$INGRESS_HOSTNAME" ]; then
          echo "Ingress Hostname: $INGRESS_HOSTNAME"
          echo "Add to /etc/hosts: echo '$(nslookup $INGRESS_HOSTNAME | grep Address | tail -1 | cut -d' ' -f2) ecommerce.local' | sudo tee -a /etc/hosts"
        else
          echo "Ingress endpoint not yet available. Check with: kubectl get ingress -n ecommerce"
        fi
        
        echo ""
        echo "üîó Service URLs (once ingress is configured):"
        echo "  - API Gateway: http://ecommerce.local/api"
        echo "  - Eureka: http://ecommerce.local/eureka"
        echo "  - Products: http://ecommerce.local/products"
        echo ""
        echo "üîß Useful commands:"
        echo "  - View logs: kubectl logs -f deployment/<service-name> -n ecommerce"
        echo "  - Scale service: kubectl scale deployment/<service-name> --replicas=3 -n ecommerce"
        echo "  - Port forward: kubectl port-forward svc/<service-name> 8080:<service-port> -n ecommerce"
    
    - name: Notify deployment success
      if: success()
      run: |
        echo "‚úÖ Deployment to ${{ github.event.inputs.environment || 'staging' }} completed successfully!"
        echo "Commit: ${{ github.sha }}"
        echo "Services: 15 microservices + infrastructure"
    
    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå Deployment to ${{ github.event.inputs.environment || 'staging' }} failed!"
        echo "Commit: ${{ github.sha }}"
        echo "Check the logs above for details."