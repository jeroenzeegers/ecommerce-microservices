name: Deploy to Kubernetes

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/ecommerce

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Configure kubectl
      uses: azure/k8s-set-context@v1
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_DATA }}
    
    - name: Create Datadog secret
      run: |
        kubectl create secret generic datadog-secret \
          --from-literal=DD_API_KEY=${{ secrets.DD_API_KEY }} \
          -n ecommerce \
          --dry-run=client -o yaml | kubectl apply -f -
    
    - name: Deploy infrastructure
      run: |
        kubectl apply -f k8s/base/namespace.yaml
        kubectl apply -f k8s/base/secrets.yaml
        kubectl apply -f k8s/infrastructure/
    
    - name: Wait for infrastructure
      run: |
        kubectl wait --for=condition=available --timeout=300s deployment/mysql -n ecommerce-infrastructure
        kubectl wait --for=condition=available --timeout=300s deployment/mongodb -n ecommerce-infrastructure
        kubectl wait --for=condition=available --timeout=300s deployment/kafka -n ecommerce-infrastructure
    
    - name: Deploy Datadog agent
      run: |
        kubectl apply -f k8s/base/datadog.yaml
        kubectl wait --for=condition=ready --timeout=300s pod -l app=datadog-agent -n ecommerce
    
    - name: Update image tags
      run: |
        # Update all service manifests with the new image tags
        for service in discovery-service api-gateway user-service product-service order-service payment-service inventory-service notification-service shipping-service favourite-service promotion-service rating-service tax-service search-service media-service; do
          sed -i "s|image: ghcr.io/YOUR_USERNAME/ecommerce-${service}:latest|image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${service}:${{ github.sha }}|g" k8s/base/services/${service}.yaml
        done
    
    - name: Deploy discovery service
      run: |
        kubectl apply -f k8s/base/services/discovery-service.yaml
        kubectl wait --for=condition=available --timeout=300s deployment/discovery-service -n ecommerce
        sleep 30  # Wait for Eureka to be fully ready
    
    - name: Deploy microservices
      run: |
        kubectl apply -f k8s/base/services/
        
        # Wait for all deployments to be ready
        for service in api-gateway user-service product-service order-service payment-service inventory-service notification-service shipping-service favourite-service promotion-service rating-service tax-service search-service media-service; do
          kubectl wait --for=condition=available --timeout=300s deployment/${service} -n ecommerce
        done
    
    - name: Deploy ingress
      run: |
        kubectl apply -f k8s/base/ingress.yaml
    
    - name: Verify deployment
      run: |
        echo "=== Deployment Status ==="
        kubectl get pods -n ecommerce
        kubectl get svc -n ecommerce
        kubectl get ingress -n ecommerce
        
        echo "=== Infrastructure Status ==="
        kubectl get pods -n ecommerce-infrastructure
        
        # Check if all pods are running
        if kubectl get pods -n ecommerce | grep -v Running | grep -v Completed | tail -n +2; then
          echo "❌ Some pods are not running"
          exit 1
        else
          echo "✅ All pods are running successfully"
        fi
    
    - name: Run health checks
      run: |
        # Wait a bit for services to fully start
        sleep 60
        
        # Get ingress IP
        INGRESS_IP=$(kubectl get ingress ecommerce-ingress -n ecommerce -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        if [ -z "$INGRESS_IP" ]; then
          INGRESS_IP=$(kubectl get ingress ecommerce-ingress -n ecommerce -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        fi
        
        echo "Ingress IP/Hostname: $INGRESS_IP"
        
        # Test API Gateway health
        if curl -f -s "http://$INGRESS_IP/api/actuator/health" > /dev/null; then
          echo "✅ API Gateway health check passed"
        else
          echo "❌ API Gateway health check failed"
          exit 1
        fi
    
    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          Kubernetes deployment to ${{ github.event.inputs.environment || 'staging' }} ${{ job.status }}
          Commit: ${{ github.sha }}
          Services: 15 microservices + infrastructure
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}